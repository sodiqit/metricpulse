// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/signer/signer.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/signer/signer.go -destination=./pkg/signer/mock_signer.go -package=signer
//

// Package signer is a generated GoMock package.
package signer

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSigner is a mock of Signer interface.
type MockSigner struct {
	ctrl     *gomock.Controller
	recorder *MockSignerMockRecorder
}

// MockSignerMockRecorder is the mock recorder for MockSigner.
type MockSignerMockRecorder struct {
	mock *MockSigner
}

// NewMockSigner creates a new mock instance.
func NewMockSigner(ctrl *gomock.Controller) *MockSigner {
	mock := &MockSigner{ctrl: ctrl}
	mock.recorder = &MockSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSigner) EXPECT() *MockSignerMockRecorder {
	return m.recorder
}

// Sign mocks base method.
func (m *MockSigner) Sign(data []byte) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", data)
	ret0, _ := ret[0].(string)
	return ret0
}

// Sign indicates an expected call of Sign.
func (mr *MockSignerMockRecorder) Sign(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockSigner)(nil).Sign), data)
}

// Verify mocks base method.
func (m *MockSigner) Verify(data []byte, signature string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", data, signature)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockSignerMockRecorder) Verify(data, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockSigner)(nil).Verify), data, signature)
}
