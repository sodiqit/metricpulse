// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/server/services/metricprocessor/metric_processor.go
//
// Generated by this command:
//
//	mockgen -source=./internal/server/services/metricprocessor/metric_processor.go -destination=./internal/server/services/metricprocessor/metric_processor_mock.go -package=metricprocessor
//

// Package metricprocessor is a generated GoMock package.
package metricprocessor

import (
	context "context"
	reflect "reflect"

	entities "github.com/sodiqit/metricpulse.git/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockMetricService is a mock of MetricService interface.
type MockMetricService struct {
	ctrl     *gomock.Controller
	recorder *MockMetricServiceMockRecorder
}

// MockMetricServiceMockRecorder is the mock recorder for MockMetricService.
type MockMetricServiceMockRecorder struct {
	mock *MockMetricService
}

// NewMockMetricService creates a new mock instance.
func NewMockMetricService(ctrl *gomock.Controller) *MockMetricService {
	mock := &MockMetricService{ctrl: ctrl}
	mock.recorder = &MockMetricServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricService) EXPECT() *MockMetricServiceMockRecorder {
	return m.recorder
}

// GetAllMetrics mocks base method.
func (m *MockMetricService) GetAllMetrics(ctx context.Context) (entities.TotalMetrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics", ctx)
	ret0, _ := ret[0].(entities.TotalMetrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockMetricServiceMockRecorder) GetAllMetrics(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockMetricService)(nil).GetAllMetrics), ctx)
}

// GetMetric mocks base method.
func (m *MockMetricService) GetMetric(ctx context.Context, metricType, metricName string) (MetricValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetric", ctx, metricType, metricName)
	ret0, _ := ret[0].(MetricValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockMetricServiceMockRecorder) GetMetric(ctx, metricType, metricName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockMetricService)(nil).GetMetric), ctx, metricType, metricName)
}

// SaveMetric mocks base method.
func (m *MockMetricService) SaveMetric(ctx context.Context, metricType, metricName string, metricValue MetricValue) (MetricValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMetric", ctx, metricType, metricName, metricValue)
	ret0, _ := ret[0].(MetricValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveMetric indicates an expected call of SaveMetric.
func (mr *MockMetricServiceMockRecorder) SaveMetric(ctx, metricType, metricName, metricValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMetric", reflect.TypeOf((*MockMetricService)(nil).SaveMetric), ctx, metricType, metricName, metricValue)
}
