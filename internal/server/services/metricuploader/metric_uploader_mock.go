// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/server/services/metricuploader/metric_uploader.go
//
// Generated by this command:
//
//	mockgen -source=./internal/server/services/metricuploader/metric_uploader.go -destination=./internal/server/services/metricuploader/metric_uploader_mock.go -package=metricuploader
//

// Package metricuploader is a generated GoMock package.
package metricuploader

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUploader is a mock of Uploader interface.
type MockUploader struct {
	ctrl     *gomock.Controller
	recorder *MockUploaderMockRecorder
}

// MockUploaderMockRecorder is the mock recorder for MockUploader.
type MockUploaderMockRecorder struct {
	mock *MockUploader
}

// NewMockUploader creates a new mock instance.
func NewMockUploader(ctrl *gomock.Controller) *MockUploader {
	mock := &MockUploader{ctrl: ctrl}
	mock.recorder = &MockUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploader) EXPECT() *MockUploaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockUploader) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockUploaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUploader)(nil).Close))
}

// Load mocks base method.
func (m *MockUploader) Load() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockUploaderMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockUploader)(nil).Load))
}

// Save mocks base method.
func (m *MockUploader) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockUploaderMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUploader)(nil).Save))
}

// StoreInterval mocks base method.
func (m *MockUploader) StoreInterval() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreInterval")
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreInterval indicates an expected call of StoreInterval.
func (mr *MockUploaderMockRecorder) StoreInterval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreInterval", reflect.TypeOf((*MockUploader)(nil).StoreInterval))
}
